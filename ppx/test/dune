; The following stanza generates an executable that applies ppx_refinements 
; transformation on an input file

(executable
 (name pp)
 (modules pp)
 (libraries ppx_refinements ppxlib))

; The following stanza uses the binary generated by the rule in above stanza to
; transform test.ml file.

(rule
 (alias runtest)
 (deps (:pp pp.exe) (:input test.ml))
 (targets test.actual.ml)
 (action (with-stdout-to %{targets}
           (run ./%{pp} --impl %{input}))))

; The following stanza checks whether or not the transformd file matches the 
; expected file. Note that since we are using `diff` to check the difference,
; the file contents of the generated and expected files have to match exactly,
; including spaces and use of extra-parenthesis, etc. Since ocamlformat might
; have its own way of formatting, we're excluding these files from being 
; formatted by ocamlformat by adding an exclude rule in the .ocamlformat file 
; in the root directory of this project.
(rule
 (alias runtest)
 (deps test.actual.ml test.expected.ml)
 (action (diff test.expected.ml test.actual.ml)))

